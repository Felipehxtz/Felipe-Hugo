
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006bf  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000644  00000000  00000000  0000086f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000258  00000000  00000000  00000eb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000110c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000020  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000014c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <StandByte>:
	
}

void StandByte (unsigned char b)
{
	PORTD &= ~latch;										// Desligando latch para primeiramente mandar o conjunto de bits
  80:	5c 98       	cbi	0x0b, 4	; 11
  82:	28 e0       	ldi	r18, 0x08	; 8
  84:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char i = (1<<7);								// Variável auxiliar que vai fazer operação bit a bit com b 
  86:	40 e8       	ldi	r20, 0x80	; 128
															// Colocando bit mais significativo em 1
	while(i)												// Enquando i for verdadeiro:
	{
		PORTD &= ~clock;									// Clock em zero para não registrar nad
  88:	5a 98       	cbi	0x0b, 2	; 11
		PORTD = (b & i)?(PORTD | data):(PORTD & ~data);		// Se b e i forem verdadeiros, data vai a 1, se não, data vai a zero 
  8a:	98 2f       	mov	r25, r24
  8c:	94 23       	and	r25, r20
  8e:	19 f0       	breq	.+6      	; 0x96 <StandByte+0x16>
  90:	9b b1       	in	r25, 0x0b	; 11
  92:	98 60       	ori	r25, 0x08	; 8
  94:	02 c0       	rjmp	.+4      	; 0x9a <StandByte+0x1a>
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	97 7f       	andi	r25, 0xF7	; 247
  9a:	9b b9       	out	0x0b, r25	; 11
		PORTD |= clock;										// Liga o clock para registrar a operação
  9c:	5a 9a       	sbi	0x0b, 2	; 11
		i >>= 1;										    // Desloca um bit para a direita no i. No final i= 0b00000000 => Falso, logo, sai do loop
  9e:	46 95       	lsr	r20
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	31 09       	sbc	r19, r1
void StandByte (unsigned char b)
{
	PORTD &= ~latch;										// Desligando latch para primeiramente mandar o conjunto de bits
	unsigned char i = (1<<7);								// Variável auxiliar que vai fazer operação bit a bit com b 
															// Colocando bit mais significativo em 1
	while(i)												// Enquando i for verdadeiro:
  a4:	89 f7       	brne	.-30     	; 0x88 <StandByte+0x8>
		PORTD = (b & i)?(PORTD | data):(PORTD & ~data);		// Se b e i forem verdadeiros, data vai a 1, se não, data vai a zero 
		PORTD |= clock;										// Liga o clock para registrar a operação
		i >>= 1;										    // Desloca um bit para a direita no i. No final i= 0b00000000 => Falso, logo, sai do loop
			
	}
	PORTD |= latch;
  a6:	5c 9a       	sbi	0x0b, 4	; 11
  a8:	08 95       	ret

000000aa <main>:

void StandByte (unsigned char b);				   // Função que vai o conjunto de bits em data. b será a variável que armazenará esse conjunto.

int main(void)
{
    DDRD |= reset | start | clock | data | latch;
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8f 61       	ori	r24, 0x1F	; 31
  ae:	8a b9       	out	0x0a, r24	; 10
	PORTD |= reset;
  b0:	58 9a       	sbi	0x0b, 0	; 11
	PORTD &= ~start;
  b2:	59 98       	cbi	0x0b, 1	; 11
	StandByte(0b10100111);
  b4:	87 ea       	ldi	r24, 0xA7	; 167
  b6:	0e 94 40 00 	call	0x80	; 0x80 <StandByte>
	return 0;
	
	
}
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	08 95       	ret

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
